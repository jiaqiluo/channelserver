name: CI on Releasing Tag

on:
  push:
#    tags:
#      - "*"

env:
  IMAGE: jq20/channelserver
#  IMAGE: rancher/channelserver

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Fix the not-a-git-repository issue
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Go fmt
        run: test -z "$(go fmt ${PACKAGES} | tee /dev/stderr)"

      - name: Golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest

      - name: Build
        run: ./scripts/build

      - name: Test
        run: ./scripts/test

  build-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # needed for the Vault authentication
    needs:
      - test
    strategy:
      fail-fast: true
      matrix:
        os: [linux]
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Setup environment variables
        run: |
          echo "GOOS=${{ matrix.os }}"     >> "$GITHUB_ENV"
          echo "GOARCH=${{ matrix.arch }}" >> "$GITHUB_ENV"
          echo "ARCH=${{ matrix.arch }}"   >> "$GITHUB_ENV"

      - name: Fix the not-a-git-repository issue
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Build
        run: ./scripts/build

      - name: Prepare artifacts
        run: |
          mkdir -p dist/artifacts
          cd dist/artifacts
          cp ../../bin/channelserver channelserver-${{ matrix.arch }}
          sha256sum channelserver-${{ matrix.arch }} > sha256sum-${{ matrix.arch }}.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "channelserver-${{ matrix.arch }}"
          path: dist/artifacts/*
          if-no-files-found: error
          overwrite: true

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          flavor: |
            latest=false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

#      - name: Load secrets from Vault
#        uses: rancher-eio/read-vault-secrets@main
#        with:
#          secrets: |
#            secret/data/github/repo/${{ github.repository }}/dockerhub/rancher/credentials username | DOCKER_USERNAME ;
#            secret/data/github/repo/${{ github.repository }}/dockerhub/rancher/credentials password | DOCKER_PASSWORD

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
#        username: ${{ env.DOCKER_USERNAME }}
#        password: ${{ env.DOCKER_PASSWORD }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: package/Dockerfile
          push: true
          tags: "${{ steps.meta.outputs.tags }}-${{ matrix.arch }}"
          platforms: "${{ matrix.os }}/${{ matrix.arch }}"
          labels: "${{ steps.meta.outputs.labels }}"

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: "digests-${{ matrix.os }}-${{ matrix.arch }}"
          path: /tmp/digests/*
          if-no-files-found: error
          overwrite: true

  merge:
    runs-on: ubuntu-latest
    needs:
      - build-push-image
    permissions:
      contents: read
      id-token: write # needed for the Vault authentication
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          flavor: |
            latest=false

#      - name: Load secrets from Vault
#        uses: rancher-eio/read-vault-secrets@main
#        with:
#          secrets: |
#            secret/data/github/repo/${{ github.repository }}/dockerhub/rancher/credentials username | DOCKER_USERNAME ;
#            secret/data/github/repo/${{ github.repository }}/dockerhub/rancher/credentials password | DOCKER_PASSWORD
#
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
#          username: ${{ env.DOCKER_USERNAME }}
#          password: ${{ env.DOCKER_PASSWORD }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.IMAGE }}:${{ steps.meta.outputs.version }}

  create-release:
    runs-on: ubuntu-latest
    needs:
      - merge
    permissions:
      contents: write # needed for creating the GH release
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download assets
        uses: actions/download-artifact@v4
        with:
          path: /tmp/assets
          pattern: channelserver-*
          merge-multiple: true

      - name: Check Files
        run: ls -l /tmp/assets

      - name: Create GH release
        run: gh release create ${{ github.ref_name }} --verify-tag --generate-notes /tmp/assets/*
